#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/78688294-f3da-4ae1-8ae1-a50acb12a907 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String mensagem1;
  String mensagem2;
  int contadorconsec;
  int contadorsaida;
  int totalfalhas;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

//int contadorsaida = 0;
int estadobotao = 0; // Botão de start / pause (Entrada I1)
int contadorentrada = 0; // Contador de nível lógico alto na entrada
int estadobotao1 = 0; // Entrada nível lógico alto, em função da saída (Entrada I2)
//int totalfalhas = 0; // Contador de erros total
int estadobotao2 = 0; // Entrada nível lógico baixo, em função da saída (Entrada I3)
int contadorentrada1 = 0; // Contador de nível lógico baixo
//int contadorconsec = 0; // Contador de falhas consecutivas
int valoranterior = 0; // Inicializa o valor anterior com o valor atual
int estadobotao3 = 0; // Botão de reset contadores
bool parar = 0;

#include "thingProperties.h"

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection, false);
  
  
  // INICIALIZANDO AS SAÍDAS À RELÉ DO OPTA;
  pinMode(D0, OUTPUT);
  pinMode(D1, OUTPUT);
  pinMode(D2, OUTPUT);
  pinMode(D3, OUTPUT);
// INICIALIZANDO OS LEDS DO OPTA;
  pinMode(LED_D0, OUTPUT);
  pinMode(LED_D1, OUTPUT);
  pinMode(LED_D2, OUTPUT);
  pinMode(LED_D3, OUTPUT);
// INICIALIZANDO AS ENTRADAS DO OPTA;
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
  pinMode(A2, INPUT);
  pinMode(A3, INPUT);
  pinMode(A4, INPUT);
  pinMode(A5, INPUT);
  pinMode(A6, INPUT);
  pinMode(A7, INPUT);
  
  /*
      Invoking `addCallback` on the ArduinoCloud object allows you to subscribe
      to any of the available events and decide which functions to call when they are fired.

      The functions `doThisOnConnect`, `doThisOnSync`, `doThisOnDisconnect`
      are custom functions and can be named to your likings and for this example
      they are defined/implemented at the bottom of the Sketch
  */
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::CONNECT, doThisOnConnect);
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::SYNC, doThisOnSync);
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::DISCONNECT, doThisOnDisconnect);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();

 if (parar == 0) {
  estadobotao = digitalRead(A0);
    if (estadobotao == HIGH){ //CONDICIONAL QUANDO A ENTRADA FOR NÍVEL LÓGICO ALTO
      digitalWrite(D0, HIGH);  // LIGA SAÍDA 1
      digitalWrite(LED_D0, HIGH); // LIGA LED 1
      mensagem2 = "TESTE EM ANDAMENTO";
      delay(2000); // ATRASO POR 2 SEGUNDOS
      contadorsaida++; // INCREMENTA 1 NO CONTADOR DE SAÍDA
      Serial.print("contagem saída:  ");
      Serial.println(contadorsaida);
      
    } 
 }
    
    
    
  
    estadobotao1 = digitalRead(A1);  
    if (estadobotao1 == HIGH){
    contadorentrada++; // INCREMENTA 1 NO CONTADOR DE ENTRADA
    Serial.print("contagem entrada alta:  "); // EXIBE NA SERIAL O TEXTO
    Serial.println(contadorentrada); // EXIBE NA SERIAL O VALOR
    }
    
  digitalWrite(D0, LOW);  // LDESLIGA SAÍDA 1
  digitalWrite(LED_D0, LOW); // APAGA LED 1
  mensagem2 = "TESTE EM ANDAMENTO";
  delay(2000); // ATRASO POR 2 SEGUNDOS
  
  
    estadobotao2 = digitalRead(A2);   
    if (estadobotao2 == HIGH && D0 == LOW){
    contadorentrada1++; // INCREMENTA 1 NO CONTADOR DE  ENTRADA1
    Serial.print("contagem entrada baixa:  "); // EXIBE NA SERIAL O TEXTO
    Serial.println(contadorentrada1); // EXIBE NA SERIAL O VALOR
    }
    
    
    totalfalhas = (contadorsaida - contadorentrada) + contadorentrada1;
    Serial.print("contagem de erros:  "); // EXIBE NA SERIAL O TEXTO
    Serial.println(totalfalhas); // EXIBE NA SERIAL O VALOR
    mensagem1 = "HOUVE FALHA";
    
    
    // LÓGICA PARA DETECÇÃO DE ERROS
       if (valoranterior != totalfalhas) { // COMPARA O VALOR ANTERIOR COM O ATUAL DE FALHAS 
      contadorconsec++; // INCREMENTA 1 NO CONTADOR DE FALHAS CONSECUTIVAS QUANDO O VALOR ANTERIOR É DIFERENTE DO ATUAL
      Serial.print("contagem consecutiva:  "); // EXIBE NA SERIAL O TEXTO
      Serial.println(contadorconsec); // EXIBE NA SERIAL O VALOR
      valoranterior = totalfalhas; // ALTERANDO O VALOR ANTERIOR PARA O ATUAL
      mensagem1 = "HOUVE FALHA";
    }else{ 
      contadorconsec = 0; // ZERA O CONTADOR DE FALHAS CONSECUTIVAS QUANDO O VALOR ANTERIOR JA ERA IGUAL O VALOR ATUAL
      Serial.print("contagem consecutiva:  "); // EXIBE NA SERIAL O TEXTO
      Serial.println(contadorconsec); // EXIBE NA SERIAL O VALOR
      valoranterior = totalfalhas; // ALTERANDO O VALOR ANTERIOR PARA O ATUAL
    }
    
    estadobotao3 = digitalRead(A7);
    if (estadobotao3 == HIGH) {
    contadorentrada = 0; //ZERA CONTADOR
    contadorsaida = 0; //ZERA CONTADOR
    totalfalhas = 0;  //ZERA CONTADOR
    contadorentrada1 = 0; //ZERA CONTADOR
    contadorconsec = 0;  //ZERA CONTADOR
    valoranterior = 0; //ZERA CONTADOR
    parar = 0;
   }
   
   if (totalfalhas >= 5 || contadorconsec >=3) {
    parar = 1;
   }
  
}

void doThisOnConnect(){
  Serial.println("OPTA conectado a Arduino IoT Cloud");
}

void doThisOnSync(){
  Serial.println("Thing Properties sincronizado");
}

void doThisOnDisconnect(){
  Serial.println("OPTA está desconectado");
  disconnectAfter();
}

void disconnectAfter(){
  Serial.println("Entrando na rotina offline");
  while(ArduinoCloud.connected() == 0){
    break;
  }
}

void onMensagemChange()  {}

void onMensagem1Change()  {}

void onMensagem2Change()  {}

